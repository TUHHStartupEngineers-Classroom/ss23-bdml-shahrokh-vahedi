{
  "hash": "088823fc66ee478d65d4c55d87d4eb05",
  "result": {
    "markdown": "---\ntitle: \"05 Performance Measure\"\ndate: \"2023-06-13\"\noutput:\n  html_document:\n    toc: yes\n    toc_float: yes\n    df_print: paged\n    collapsed: no\n    number_sections: yes\n    toc_depth: 3\n  pdf_document:\n    toc: yes\n    toc_depth: '3'\n---\n\n\n\n\n**Attention:** When I run my code in R Studio chunk by chunk, I am able to get the result and plot the charts. But, as I use the \"Knit to HTML\" or \"Render\" I get the following error which I can not debug:\n\n<span style=\"color:red;\">\nERROR MESSAGE:\n\n<span style=\"color:red;\">Illegal argument: training_frame of function: grid: Cannot append new models to a grid with different training input</span>\n\n<span style=\"color:red;\">Calls: <Anonymous> ... eval -> h2o.grid -> .h2o.__remoteSend -> .h2o.doSafeREST</span>\n\n                                                                                                  \n<span style=\"color:red;\">Execution halted </span>\n\nTherefore, I stopped the R code chunks to be run but shown (using eval = FALSE), and instead I added the images of plots (which I got by running the code chunk by chunk) in the respected section.\n           \n\n# Leaderboard visualization\n\n## Load the training & test dataset\n\n\n::: {.cell hash='05_ml05_perf_meas_cache/html/unnamed-chunk-1_37697094be82b01fec817db582e76ae4'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(yardstick)\nlibrary(workflows)\nlibrary(tune)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(parsnip)\n\ndataset <- read_csv(\"data05/product_backorders.csv\") %>% mutate( product_backorder = went_on_backorder %>% str_to_lower() %>% str_detect(\"yes\") %>% as.numeric() ) %>% mutate(product_backorder = as.factor(product_backorder)) %>% select(-c(went_on_backorder))\n\nglimpse(dataset)\n\nsplit_obj<- initial_split(dataset, prop = 0.85)\ntrain_tbl<- training(split_obj)\ntest_tbl<- testing(split_obj)\n```\n:::\n\n\n## Specifiy the response and predictor variables\n\n\n::: {.cell hash='05_ml05_perf_meas_cache/html/unnamed-chunk-2_56ef6ffb59ff7cac26412b5b9f4a6f17'}\n\n```{.r .cell-code}\nrecipe_obj <- recipe(product_backorder ~., data = train_tbl) %>% \n    step_zv(all_predictors()) %>% \n    step_dummy(all_nominal(),-all_outcomes()) %>%\n    prep()\n\nsummary(recipe_obj)\n```\n:::\n\n\n## run AutoML specifying the stopping criterion\n\n\n::: {.cell hash='05_ml05_perf_meas_cache/html/unnamed-chunk-3_8a015d94245829f24f6af5bcaf1093c3'}\n\n```{.r .cell-code}\nlibrary(h2o)\nh2o.init()\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.75), seed = 42)\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\ny <- \"product_backorder\"\nx <- setdiff(names(train_h2o), y)\n\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 140,\n  nfolds            = 5,\n  stopping_metric = \"auc\", stopping_rounds = 3,\n                        stopping_tolerance = 1e-3\n)\n```\n:::\n\n\n## Leaderboard visualization\n\n\n::: {.cell hash='05_ml05_perf_meas_cache/html/unnamed-chunk-4_686a4ba795bd9874402539b0b9e9dabf'}\n\n```{.r .cell-code}\nautoml_models_h2o@leaderboard \n\nsummary(automl_models_h2o@leaderboard %>% as_tibble() )\n\ndata_transformed_tbl <- automl_models_h2o@leaderboard %>%\n        as_tibble() %>%\n        select(-c(rmse, mse)) %>% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n        slice(1:15) %>% \n        rownames_to_column(var = \"rowname\") %>%\n        # Visually this step will not change anything\n        # It reorders the factors under the hood\n        mutate(\n          model_id   = as_factor(model_id) %>% reorder(auc),\n          model_type = as.factor(model_type)\n          ) %>% \n          pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       ) %>% \n        mutate(model_id = paste0(rowname, \". \", model_id) %>% as_factor() %>% fct_rev())\n\ndata_transformed_tbl %>%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = 3) +\n        geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n        # Facet to break out logloss and auc\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", \"auc\"),\n             y = \"Model Postion, Model ID\", x = \"\") + \n        theme(legend.position = \"bottom\")\n```\n:::\n\n\n![Fig. 1 LeaderBoard Visualization](../../assets/img/05_images/1.jpg)\n\n# Tune a model with grid search\n\n\n::: {.cell hash='05_ml05_perf_meas_cache/html/unnamed-chunk-5_ea5fba9e880a98aa1ddd124700096048'}\n\n```{.r .cell-code}\ndeeplearning_grid_01 <- h2o.grid(\n    # See help page for available algos\n    algorithm = \"deeplearning\",\n    \n    # I just use the same as the object\n    grid_id = \"deeplearning_grid_01\",\n    \n    # The following is for ?h2o.deeplearning()\n    # predictor and response variables\n    x = x,\n    y = y,\n    \n    # training and validation frame and crossfold validation\n    training_frame   = train_h2o,\n    validation_frame = valid_h2o,\n    nfolds = 5,\n    # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n    hyper_params = list(\n        # Use some combinations (the first one was the original)\n        hidden = list(c(10, 10, 10), c(20, 15, 10), c(20, 20, 20)),\n        epochs = c(10, 15, 20)\n    )\n)\n\nh2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n\ndeeplearning_grid_01_model_1 <- h2o.getModel(\"deeplearning_grid_01_model_8\")\n\ndeeplearning_grid_01_model_1 %>% h2o.auc(train = T, valid = T, xval = T)\n\nperformance_h2o <-deeplearning_grid_01_model_1 %>%\n    h2o.performance(newdata = as.h2o(test_tbl))\nperformance_h2o\n```\n:::\n\n\n# Visualize the trade of between the precision and the recall and the optimal threshold\n\n\n::: {.cell hash='05_ml05_perf_meas_cache/html/unnamed-chunk-6_389ea62e07a2201cf3841e45b566ea3d'}\n\n```{.r .cell-code}\ntheme_new <- theme(\n      legend.position  = \"bottom\",\n      legend.key       = element_blank(),,\n      panel.background = element_rect(fill   = \"transparent\"),\n      panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n      panel.grid.major = element_line(color = \"grey\", size = 0.333)\n      ) \n\nh2o.confusionMatrix(performance_h2o)\n\nperformance_tbl <- performance_h2o %>%\n    h2o.metric() %>%\n    as.tibble()\n\nperformance_tbl %>%\n    filter(f1 == max(f1))\n\nperformance_tbl %>%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), color = \"blue\", size = 1) +\n    geom_line(aes(y = recall), color = \"red\", size = 1) +\n    \n    # Insert line where precision and recall are harmonically optimized\n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n    labs(title = \"Precision vs Recall\", y = \"value\") +\n    theme_new\n\nbest_model <- h2o.getModel(\"deeplearning_grid_01_model_8\")\n\nbest_model %>% h2o.saveModel(path = \"model05\",force = TRUE)\n```\n:::\n\n\n![Fig. 2 Precision vs. Recall](../../assets/img/05_images/2.jpg)\n\n\n::: {.cell hash='05_ml05_perf_meas_cache/html/unnamed-chunk-7_005c34cd01f0dbbaf7e7202b3fc778cd'}\n\n```{.r .cell-code}\nload_model_performance_metrics <- function(path, test_tbl) {\n    \n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %>%\n        h2o.metric() %>%\n        as_tibble() %>%\n        mutate(auc = h2o.auc(perf_h2o)) %>%\n        select(tpr, fpr, auc, precision, recall)\n    \n}\n```\n:::\n\n\n\n# ROC Plot\n\n::: {.cell hash='05_ml05_perf_meas_cache/html/unnamed-chunk-8_1130b5a00b5f05751e16b8457dfc3265'}\n\n```{.r .cell-code}\nmodel_metrics_tbl <- fs::dir_info(path = \"model05\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %>%\n    unnest(cols = metrics)\n\nglimpse(model_metrics_tbl)\n\nmodel_metrics_tbl %>%\n    mutate(\n        # Extract the model names\n        path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n        ) %>%\n    ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n\n    # just for demonstration purposes\n    geom_abline(color = \"red\", linetype = \"dotted\") +\n\n    theme_new +\n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"ROC Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n```\n:::\n\n\n![Fig. 3 ROC Plot](../../assets/img/05_images/3.jpg)\n\n# Precision vs Recall Plot\n\n::: {.cell hash='05_ml05_perf_meas_cache/html/unnamed-chunk-9_5127a7917db695ca5e4cdfd1ac675f10'}\n\n```{.r .cell-code}\nmodel_metrics_tbl %>%\n    mutate(\n        path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n    ) %>%\n    ggplot(aes(recall, precision, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    theme_new + \n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"Precision vs Recall Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n```\n:::\n\n\n![Fig. 4 Precision vs. Recall Plot](../../assets/img/05_images/4.jpg)\n\n# Gain Plot\n\n::: {.cell hash='05_ml05_perf_meas_cache/html/unnamed-chunk-10_cb0de4fa158bf49ee2855f7e0b8dacca'}\n\n```{.r .cell-code}\ngain_lift_tbl <- performance_h2o %>%\n    h2o.gainsLift() %>%\n    as.tibble()\n\ngain_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"lift\")) %>%\n    mutate(baseline = cumulative_data_fraction) %>%\n    rename(gain     = cumulative_capture_rate) %>%\n    # prepare the data for the plotting (for the color and group aesthetics)\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    ) +\n    theme_new\n```\n:::\n\n\n![Fig. 5 Gain Plot](../../assets/img/05_images/5.jpg)\n\n# Lift Plot\n\n::: {.cell hash='05_ml05_perf_meas_cache/html/unnamed-chunk-11_8d02697c0bf6a8459a4cd969dfd6d7ed'}\n\n```{.r .cell-code}\nlift_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"capture\")) %>%\n    mutate(baseline = 1) %>%\n    rename(lift = cumulative_lift) %>%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Lift Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    ) +\n    theme_new\n```\n:::\n\n\n![Fig. 6 Lift Plot](../../assets/img/05_images/6.jpg)\n\n# Dashboard with cowplot\n\n\n::: {.cell hash='05_ml05_perf_meas_cache/html/unnamed-chunk-12_b2fa52eb6540ae09ce331d6df385e09d'}\n\n```{.r .cell-code}\nlibrary(cowplot)\nlibrary(glue)\n\n# set values to test the function while building it\nh2o_leaderboard <- automl_models_h2o@leaderboard\nnewdata <- test_tbl\norder_by <- \"auc\"\nmax_models <- 4\nsize <- 1\n\nplot_h2o_performance <- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n    \n    # Inputs\n    \n    leaderboard_tbl <- h2o_leaderboard %>%\n        as_tibble() %>%\n        slice(1:max_models)\n    \n    newdata_tbl <- newdata %>%\n        as_tibble()\n    \n    # Selecting the first, if nothing is provided\n    order_by      <- tolower(order_by[[1]]) \n    \n    # Convert string stored in a variable to column name (symbol)\n    order_by_expr <- rlang::sym(order_by)\n\n    # Turn of the progress bars ( opposite h2o.show_progress())\n    h2o.no_progress()\n    \n    # 1. Model metrics\n    \n    get_model_performance_metrics <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n        \n        perf_h2o %>%\n            h2o.metric() %>%\n            as.tibble() %>%\n            select(threshold, tpr, fpr, precision, recall)\n        \n    }\n    \n    model_metrics_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n          model_id = as_factor(model_id) %>% \n                      # programmatically reorder factors depending on order_by\n                      fct_reorder(!! order_by_expr, \n                                  .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n          auc      = auc %>% \n                      round(3) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id)),\n          logloss  = logloss %>% \n                      round(4) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id))\n        )\n    \n    \n    # 1A. ROC Plot\n    \n    p1 <- model_metrics_tbl %>%\n        ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n        theme(legend.direction = \"vertical\") \n        \n    \n    # 1B. Precision vs Recall\n    \n    p2 <- model_metrics_tbl %>%\n        ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n        theme(legend.position = \"none\") \n    \n    \n    # 2. Gain / Lift\n    \n    get_gain_lift <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n        \n        perf_h2o %>%\n            h2o.gainsLift() %>%\n            as.tibble() %>%\n            select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n        \n    }\n    \n    gain_lift_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n            model_id = as_factor(model_id) %>% \n                fct_reorder(!! order_by_expr, \n                            .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n            auc  = auc %>% \n                round(3) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id)),\n            logloss = logloss %>% \n                round(4) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id))\n        ) %>%\n        rename(\n            gain = cumulative_capture_rate,\n            lift = cumulative_lift\n        ) \n    \n    # 2A. Gain Plot\n    \n    p3 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, gain, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size,) +\n        geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Gain\",\n             x = \"Cumulative Data Fraction\", y = \"Gain\") +\n        theme(legend.position = \"none\")\n    \n    # 2B. Lift Plot\n    \n    p4 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, lift, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Lift\",\n             x = \"Cumulative Data Fraction\", y = \"Lift\") +\n        theme(legend.position = \"none\") \n    \n    \n    # Combine using cowplot\n    \n    # cowplot::get_legend extracts a legend from a ggplot object\n    p_legend <- get_legend(p1)\n    # Remove legend from p1\n    p1 <- p1 + theme(legend.position = \"none\")\n    \n    # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n    p <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n    \n    # cowplot::ggdraw() sets up a drawing layer\n    p_title <- ggdraw() + \n    \n        # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n        draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n                   color = \"#2C3E50\")\n    \n    p_subtitle <- ggdraw() + \n        draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n                   color = \"#2C3E50\")\n    \n    # Combine everything\n    ret <- plot_grid(p_title, p_subtitle, p, p_legend, \n    \n                     # Adjust the relative spacing, so that the legends always fits\n                     ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n    \n    h2o.show_progress()\n    \n    return(ret)\n    \n}\n\nautoml_models_h2o@leaderboard %>%\n    plot_h2o_performance(newdata = test_tbl, order_by = \"logloss\", \n                         size = 0.5, max_models = 4)\n```\n:::\n\n\n![Fig. 7 Dashboard with cowplot](../../assets/img/05_images/7.jpg)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}